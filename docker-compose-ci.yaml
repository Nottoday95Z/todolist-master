version: "3.9"

services:
  front:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
  api:
    image: nottoday95z/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      BOT_TOKEN: ${BOT_TOKEN}
      DEBUG: False
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
  bot:
    image: nottoday95z/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    depends_on:
      migrations:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    environment:
      SECRET_KEY: ${SECRET_KEY}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      BOT_TOKEN: ${BOT_TOKEN}
      DEBUG: False
    command: python manage.py runbot


  migrations:
    image: nottoday95z/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
      BOT_TOKEN: ${BOT_TOKEN}
      DEBUG: False
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c 'python3 manage.py makemigrations && python3 manage.py migrate'

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      timeout: 5s
      interval: 5s
      retries: 5
    volumes:
      - ./postgres_data:/var/lib/postgresql/data

volumes:
  pg_data: